### Starting build.
# Target: main.ml.depends, tags: { package(llvm), extension:ml, file:main.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm -modules main.ml > main.ml.depends
# Target: codegen.ml.depends, tags: { package(llvm), extension:ml, file:codegen.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm -modules codegen.ml > codegen.ml.depends
# Target: expr.ml.depends, tags: { package(llvm), extension:ml, file:expr.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm -modules expr.ml > expr.ml.depends
# Target: expr.cmo, tags: { package(llvm), byte, compile, extension:cmo, extension:ml, file:expr.cmo, file:expr.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package llvm -o expr.cmo expr.ml
# Target: lexer.mll, tags: { package(llvm), extension:mll, file:lexer.mll, lexer, ocaml, ocamllex, quiet }
/home/icarus/.opam/default/bin/ocamllex.opt -q lexer.mll # cached
# Target: lexer.ml.depends, tags: { package(llvm), extension:ml, file:lexer.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm -modules lexer.ml > lexer.ml.depends
# Target: parser.mly.depends, tags: { package(llvm), extension:mly, file:parser.mly, infer, menhir_ocamldep, ocaml, ocamldep, quiet }
menhir --raw-depend --ocamldep 'ocamlfind ocamldep -modules' parser.mly > parser.mly.depends # cached
# Target: parser.mly, tags: { package(llvm), byte, compile, extension:ml, extension:mly, file:parser.ml, file:parser.mly, infer, menhir, ocaml, parser, quiet }
menhir --ocamlc 'ocamlfind ocamlc -package llvm' --infer parser.mly
+ menhir --ocamlc 'ocamlfind ocamlc -package llvm' --infer parser.mly
File "parser.mly", line 9, characters 38-43:
Warning: the token CARET is unused.
Warning: 3 states have shift/reduce conflicts.
Warning: 25 shift/reduce conflicts were arbitrarily resolved.
# Target: parser.mli.depends, tags: { package(llvm), extension:mli, file:parser.mli, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm -modules parser.mli > parser.mli.depends
# Target: parser.cmi, tags: { package(llvm), byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet }
ocamlfind ocamlc -c -package llvm -o parser.cmi parser.mli
# Target: codegen.cmo, tags: { package(llvm), byte, compile, extension:cmo, extension:ml, file:codegen.cmo, file:codegen.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package llvm -o codegen.cmo codegen.ml
+ ocamlfind ocamlc -c -package llvm -o codegen.cmo codegen.ml
File "codegen.ml", line 32, characters 49-56:
32 |           let int_spec = build_gep (pointer_type i8_type) (str "%d\n") [| const_int i32_type 0; const_int i32_type 0 |] "int_spec" builder in
                                                      ^^^^^^^
Error: This expression has type Llvm.lltype
       but an expression was expected of type Llvm.llcontext
Command exited with code 2.
# Compilation unsuccessful.
