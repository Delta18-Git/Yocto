### Starting build.
# Target: main.ml.depends, tags: { package(menhir), package(yojson), extension:ml, file:main.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package yojson -package menhir -modules main.ml > main.ml.depends # cached
# Target: codegen.ml.depends, tags: { package(menhir), package(yojson), extension:ml, file:codegen.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package yojson -package menhir -modules codegen.ml > codegen.ml.depends # cached
# Target: expr.ml.depends, tags: { package(menhir), package(yojson), extension:ml, file:expr.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package yojson -package menhir -modules expr.ml > expr.ml.depends # cached
# Target: expr.cmo, tags: { package(menhir), package(yojson), byte, compile, extension:cmo, extension:ml, file:expr.cmo, file:expr.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package yojson -package menhir -o expr.cmo expr.ml # cached
# Target: codegen.cmo, tags: { package(menhir), package(yojson), byte, compile, extension:cmo, extension:ml, file:codegen.cmo, file:codegen.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package yojson -package menhir -o codegen.cmo codegen.ml # cached
# Target: lexer.mll, tags: { package(menhir), package(yojson), extension:mll, file:lexer.mll, lexer, ocaml, ocamllex, quiet }
/home/icarus/.opam/default/bin/ocamllex.opt -q lexer.mll # cached
# Target: lexer.ml.depends, tags: { package(menhir), package(yojson), extension:ml, file:lexer.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package yojson -package menhir -modules lexer.ml > lexer.ml.depends # cached
# Target: parser.mly, tags: { package(menhir), package(yojson), extension:mly, file:parser.mly, infer, ocaml, ocamlyacc, parser, quiet }
/home/icarus/.opam/default/bin/ocamlyacc parser.mly # cached
# Target: parser.mli.depends, tags: { package(menhir), package(yojson), extension:mli, file:parser.mli, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package yojson -package menhir -modules parser.mli > parser.mli.depends # cached
# Target: parser.cmi, tags: { package(menhir), package(yojson), byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet }
ocamlfind ocamlc -c -package yojson -package menhir -o parser.cmi parser.mli # cached
# Target: lexer.cmo, tags: { package(menhir), package(yojson), byte, compile, extension:cmo, extension:ml, file:lexer.cmo, file:lexer.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package yojson -package menhir -o lexer.cmo lexer.ml # cached
# Target: main.cmo, tags: { package(menhir), package(yojson), byte, compile, extension:cmo, extension:ml, file:main.cmo, file:main.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package yojson -package menhir -o main.cmo main.ml # cached
# Target: parser.ml.depends, tags: { package(menhir), package(yojson), extension:ml, file:parser.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package yojson -package menhir -modules parser.ml > parser.ml.depends # cached
# Target: parser.cmo, tags: { package(menhir), package(yojson), byte, compile, extension:cmo, extension:ml, file:parser.cmo, file:parser.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package yojson -package menhir -o parser.cmo parser.ml # cached
# Target: main.byte, tags: { package(menhir), package(yojson), byte, dont_link_with, extension:byte, file:main.byte, link, ocaml, program, quiet }
ocamlfind ocamlc -linkpkg -package yojson -package menhir expr.cmo codegen.cmo parser.cmo lexer.cmo main.cmo -o main.byte # cached
# Compilation successful.
